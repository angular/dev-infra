# NOTE: We need to test with the raw jasmine rule here because our default
# repo rule uses spec-bundling as well, with some additional defaults.
load("@npm//@bazel/jasmine:index.bzl", "jasmine_node_test")
load("//bazel/spec-bundling:index.bzl", "spec_bundle")
load("//tools:defaults.bzl", "ts_library")

ts_library(
    name = "test_lib_apf",
    testonly = True,
    srcs = ["core_apf_esm.spec.ts"],
    deps = [
        "@npm//@angular/core",
        "@npm//@types/jasmine",
    ],
)

ts_library(
    name = "test_lib_invalid_linker_declaration",
    testonly = True,
    srcs = ["core_invalid_linker_decl.spec.ts"],
    deps = [
        "@npm//@angular/core",
        "@npm//@types/jasmine",
    ],
)

spec_bundle(
    name = "test_bundle",
    platform = "node",
    run_angular_linker = True,
    deps = [":test_lib_apf"],
)

spec_bundle(
    name = "test_bundle_legacy_cjs",
    platform = "cjs-legacy",
    run_angular_linker = True,
    deps = [":test_lib_apf"],
)

spec_bundle(
    name = "test_bundle_invalid_declaration_linker",
    linker_unknown_declaration_handling = "ignore",
    platform = "node",
    run_angular_linker = True,
    deps = [":test_lib_invalid_linker_declaration"],
)

jasmine_node_test(
    name = "test",
    deps = [
        ":test_bundle",
    ],
)

jasmine_node_test(
    name = "test_legacy_cjs",
    deps = [
        ":test_bundle_legacy_cjs",
    ],
)

jasmine_node_test(
    name = "test_invalid_declaration_linker",
    deps = [
        ":test_bundle_invalid_declaration_linker",
    ],
)
