load("@aspect_rules_jasmine//jasmine:defs.bzl", "jasmine_test")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config", "ts_project")
load("@devinfra_npm//:defs.bzl", "npm_link_all_packages")
load("//bazel/spec-bundling:index.bzl", "spec_bundle")

npm_link_all_packages()

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    deps = [
        ":node_modules/@types/jasmine",
        ":node_modules/@types/node",
    ],
)

ts_project(
    name = "transitive_should_be_loaded",
    srcs = ["should_be_picked_up.spec.ts"],
    declaration = True,
    tsconfig = ":tsconfig",
    deps = [
        ":node_modules/@types/jasmine",
        ":node_modules/@types/node",
    ],
)

ts_project(
    name = "test_async_await_lib",
    testonly = True,
    srcs = ["async-await.spec.ts"],
    declaration = True,
    tsconfig = ":tsconfig",
    deps = [
        ":node_modules/@angular/core",
        ":node_modules/@angular/platform-browser-dynamic",
        ":node_modules/@types/jasmine",
        ":node_modules/@types/jsdom",
        ":node_modules/@types/node",
        ":node_modules/jsdom",
        ":node_modules/zone.js",
    ],
)

ts_project(
    name = "ensure_transitive_loaded_lib",
    testonly = True,
    srcs = ["ensure-transitive-loaded.spec.ts"],
    declaration = True,
    tsconfig = ":tsconfig",
    deps = [
        ":node_modules/@types/jasmine",
        ":node_modules/@types/node",
        ":transitive_should_be_loaded",
    ],
)

ts_project(
    name = "test_lib_apf",
    testonly = True,
    srcs = ["core_apf_esm_test.ts"],
    declaration = True,
    tsconfig = ":tsconfig",
    deps = [
        ":node_modules/@angular/compiler",
        ":node_modules/@angular/core",
        ":node_modules/@types/jasmine",
    ],
)

ts_project(
    name = "test_lib_invalid_linker_declaration",
    testonly = True,
    srcs = ["core_invalid_linker_decl.spec.ts"],
    declaration = True,
    tsconfig = ":tsconfig",
    deps = [
        ":node_modules/@angular/compiler",
        ":node_modules/@angular/core",
        ":node_modules/@types/jasmine",
    ],
)

spec_bundle(
    name = "test_bundle",
    bootstrap = [
        # Ensure that the transitive loaded spec is the first in the order loaded
        "ensure-transitive-loaded.spec.js",
    ],
    deps = [
        ":ensure_transitive_loaded_lib",
        ":test_lib_apf",
    ],
)

spec_bundle(
    name = "test_bundle_legacy_cjs",
    deps = [":test_lib_apf"],
)

spec_bundle(
    name = "test_bundle_invalid_declaration_linker",
    deps = [":test_lib_invalid_linker_declaration"],
)

spec_bundle(
    name = "test_bundle_async_await",
    external = ["jsdom"],
    deps = [":test_async_await_lib"],
)

jasmine_test(
    name = "test",
    data = [
        ":test_bundle",
    ],
    fixed_args = [
        "'**/*+(.|_)spec.js'",
    ],
    node_modules = ":node_modules",
)

jasmine_test(
    name = "test_legacy_cjs",
    data = [
        ":test_bundle_legacy_cjs",
    ],
    fixed_args = [
        "'**/*+(.|_)spec.js'",
    ],
    node_modules = ":node_modules",
)

jasmine_test(
    name = "test_invalid_declaration_linker",
    data = [
        ":test_bundle_invalid_declaration_linker",
    ],
    fixed_args = [
        "'**/*+(.|_)spec.js'",
    ],
    node_modules = ":node_modules",
)

jasmine_test(
    name = "test_async_await",
    data = [
        ":node_modules/jsdom",
        ":test_bundle_async_await",
    ],
    fixed_args = [
        "'**/*+(.|_)spec.js'",
    ],
    node_modules = ":node_modules",
)
