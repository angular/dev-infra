load("//bazel:defaults.bzl", "ts_library")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")

package(default_visibility = ["//bazel/api-gen:__subpackages__"])

ts_library(
    name = "render_api_to_html_lib",
    srcs = glob(
        [
            "**/*.ts",
            "**/*.tsx",
        ],
        exclude = [
            "entities.ts",
        ],
    ),
    devmode_module = "commonjs",
    tsconfig = "//:tsconfig.json",
    deps = [
        ":entities",
        "@npm//@bazel/runfiles",
        "@npm//@types/node",
        "@npm//highlight.js",
        "@npm//html-entities",
        "@npm//marked",
        "@npm//preact",
        "@npm//preact-render-to-string",
    ],
)

ts_library(
    name = "entities",
    srcs = [
        "entities.ts",
    ],
    tsconfig = "//:tsconfig.json",
    visibility = [
        "//bazel/api-gen/rendering:__pkg__",
        "//docs/pipeline/guides:__pkg__",
    ],
)

# Action binary for the api_gen bazel rule.
nodejs_binary(
    name = "render_api_to_html",
    data = [
        ":render_api_to_html_lib",
    ],
    entry_point = "//bazel/api-gen/rendering:index.ts",
    # Do not use the NodeJS linker because:
    #  - it's brittle and causes race conditions on Windows.
    #  - it requires additional work to setup the runtime linker.
    templated_args = [
        "--bazel_patch_module_resolver",
        "--node_options=--preserve-symlinks-main",
    ],
    visibility = ["//visibility:public"],
)

# Expose the sources in the dev-infra NPM package.
filegroup(
    name = "files",
    srcs = glob(["**/*"]),
)
