# Configuration file for https://circleci.com/gh/angular/dev-infra

version: 2.1

orbs:
  buildalert: oss-tools/buildalert@0.1.0
  win: circleci/windows@2.2.0
  devinfra: angular/dev-infra@1.0.8

# **Note**: When updating the beginning of the cache key, also update the cache key to match
# the new cache key prefix. This allows us to take advantage of CircleCI's fallback caching.
# Read more here: https://circleci.com/docs/2.0/caching/#restoring-cache.
var_1: &cache_key v2-{{arch}}-{{ checksum ".bazelversion" }}-{{ checksum "WORKSPACE" }}--{{ checksum "yarn.lock" }}
# We use a different cache if the Bazel version changes, or if the executor is a different one.
# We do this because otherwise the `bazelisk` cache folder will contain all previously used
# versions and ultimately cause the cache restoring to be slower.
var_2: &cache_fallback_key v2-{{arch}}-{{ checksum ".bazelversion" }}-

var_4: &restore_cache
  restore_cache:
    keys:
      - *cache_key
      - *cache_fallback_key

var_5: &save_cache
  save_cache:
    key: *cache_key
    paths:
      - '.yarn/cache'
      - '~/.cache/bazelisk'
      - '~/bazel_repository_cache'

var_6: &default_executor_settings
  parameters:
    resource_class:
      type: string
      default: medium
  resource_class: << parameters.resource_class >>
  working_directory: ~/ng

var_7: &main_upstream_branches_filter
  branches:
    only:
      - main
      # Additional branch that can be used to test the snapshot build output.
      # Developers can just push to that branch to test the built artifact.
      - snapshot-test

# Executor Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors
executors:
  docker-linux-executor:
    <<: *default_executor_settings
    docker:
      - image: cimg/node:16.14.0-browsers

  macos-x64-executor:
    <<: *default_executor_settings
    macos:
      xcode: '13.3.1'

# Command Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
commands:
  custom_attach_workspace:
    description: Attach workspace at a predefined location
    steps:
      - attach_workspace:
          at: ~/

  yarn_install:
    description: Run yarn install
    steps:
      - run:
          name: yarn install
          command: yarn install --immutable
          no_output_timeout: 5m

  setup_bazel_config:
    description: 'Setting up Bazel configuration for CI'
    steps:
      - run: echo "import %workspace%/.circleci/linux-bazel.rc" >> ./.bazelrc.user
      - devinfra/setup-bazel-remote-exec:
          bazelrc: ./.bazelrc.user

  prepare_and_store_test_results:
    description: 'Prepare and upload test results'
    steps:
      - run:
          name: Copy JUnit test reports to central folder for upload
          command: yarn ng-dev ci gather-test-results
          when: always
      - store_test_results:
          path: ./test-results

  checkout_and_rebase:
    description: Checkout and rebase the repository
    steps:
      - checkout
      # After checkout, rebase PRs on top of target branch.
      - devinfra/rebase-pr-on-target-branch:
          base_revision: << pipeline.git.base_revision >>
          head_revision: << pipeline.git.revision >>

# Job definitions
# Jobs can include parameters that are passed in the workflow job invocation.
# https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
jobs:
  test_macos_x64:
    executor:
      name: macos-x64-executor
      resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - *restore_cache
      - yarn_install
      # Firefox tests will run in the Bazel sandbox, but Firefox currently requires, regardless
      # of us specifying a custom profile directory, that the default profile directory exists.
      # TODO: Remove this once https://bugzilla.mozilla.org/show_bug.cgi?id=1754821#c3 is resolved.
      - run: mkdir "$HOME/Library/Application Support/Firefox"
      - run: yarn bazel test --test_tag_filters=macos --build_tests_only -- //... -//bazel/remote-execution/...
      - *save_cache

  test_windows_x64:
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - *restore_cache
      - yarn_install
      - run: yarn bazel test --test_tag_filters=windows --build_tests_only -- ... -bazel/remote-execution/...
      - *save_cache

  publish_snapshot_build:
    executor: docker-linux-executor
    steps:
      - checkout_and_rebase
      - *restore_cache
      - setup_bazel_config
      - yarn_install
      - run:
          name: Build npm packages (build-tooling and ng-dev)
          command: yarn bazel build //:npm_package //ng-dev:npm_package --config=release
      - run:
          name: Publish snapshot builds to GitHub
          command: |
            ./.circleci/publish_to_github.sh "@angular/build-tooling" "dev-infra-private-build-tooling-builds" "dist/bin/npm_package"
            ./.circleci/publish_to_github.sh "@angular/ng-dev" "dev-infra-private-ng-dev-builds" "dist/bin/ng-dev/npm_package"

workflows:
  version: 2
  default_workflow:
    jobs:
      - test_macos_x64:
          filters: *main_upstream_branches_filter
      - test_windows_x64:
          filters: *main_upstream_branches_filter
      - publish_snapshot_build:
          filters: *main_upstream_branches_filter
