# Configuration file for https://circleci.com/gh/angular/dev-infra

version: 2.1

orbs:
  buildalert: oss-tools/buildalert@0.1.0

# **Note**: When updating the beginning of the cache key, also update the cache key to match
# the new cache key prefix. This allows us to take advantage of CircleCI's fallback caching.
# Read more here: https://circleci.com/docs/2.0/caching/#restoring-cache.
var_1: &cache_key v1-{{ checksum ".bazelversion" }}-{{ checksum "WORKSPACE" }}
# We invalidate the cache if the Bazel version changes. We do this because otherwise the `bazelisk`
# cache folder will contain all previously used versions and ultimately cause the cache
# restoring to be slower.
var_2: &cache_fallback_key v1-{{ checksum ".bazelversion" }}-

var_3: &gcp_decrypt_token 'angular'

var_4: &restore_cache
  restore_cache:
    keys:
      - *cache_key
      - *cache_fallback_key

var_5: &save_cache
  save_cache:
    key: *cache_key
    paths:
      - '~/.cache/bazelisk'
      - '~/bazel_repository_cache'

# Executor Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors
executors:
  default-executor:
    parameters:
      resource_class:
        type: string
        default: medium
    environment:
      GCP_DECRYPT_TOKEN: *gcp_decrypt_token
    docker:
      - image: cimg/node:16.10.0-browsers@sha256:83ff2dcad3043c4b3f7f58513805a0c8757ba5541a1f3c213f80bd242a3c77ac
    resource_class: << parameters.resource_class >>
    working_directory: ~/ng

# Command Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
commands:
  custom_attach_workspace:
    description: Attach workspace at a predefined location
    steps:
      - attach_workspace:
          at: ~/

  yarn_install:
    description: Run yarn install
    steps:
      - run:
          name: yarn install
          command: yarn install --immutable
          no_output_timeout: 2m

  setup_bazel_config:
    description: 'Setting up Bazel configuration for CI'
    steps:
      - run: echo "import %workspace%/.circleci/bazel.rc" >> ./.bazelrc
      - run: ./.circleci/setup-bazel.sh

  prepare_and_store_test_results:
    description: 'Prepare and upload test results'
    steps:
      - run:
          name: Copy JUnit test reports to central folder for upload
          command: yarn ng-dev ci gather-test-results
          when: always
      - store_test_results:
          path: ./test-results

  checkout_and_rebase:
    description: Checkout and rebase the repository
    steps:
      - checkout
      # After checkout, rebase on top of target branch.
      - run:
          name: Rebase PR on target branch
          environment:
            CIRCLE_GIT_BASE_REVISION: << pipeline.git.base_revision >>
            CIRCLE_GIT_REVISION: << pipeline.git.revision >>
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              # User is required for rebase.
              git config user.name "Angular Robot"
              git config user.email "angular-robot@google.com"
              node .circleci/rebase-pr.js
            fi

# Job definitions
# Jobs can include parameters that are passed in the workflow job invocation.
# https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
jobs:
  test:
    executor: default-executor
    steps:
      - checkout_and_rebase
      - *restore_cache
      - setup_bazel_config
      - yarn_install
      # Run all tests in the workspace. Also explicitly add the component benchmark test. Benchmark
      # tests are not run by default on CI but we want to verify the macro works.
      - run: yarn bazel test -- //... //bazel/benchmark/component_benchmark/test
      - prepare_and_store_test_results
      - *save_cache

  lint:
    executor: default-executor
    steps:
      - checkout_and_rebase
      - *restore_cache
      - setup_bazel_config
      - yarn_install
      - run:
          name: Check code format
          command: yarn ng-dev format changed --check << pipeline.git.base_revision >>
      - run:
          name: Check commit messages
          command: yarn ng-dev commit-message validate-range << pipeline.git.base_revision >> << pipeline.git.revision >>

  publish_snapshot_build:
    executor: default-executor
    steps:
      - checkout_and_rebase
      - *restore_cache
      - setup_bazel_config
      - yarn_install
      - run:
          name: Build npm package
          command: yarn bazel build //:npm_package --config=release
      - run:
          name: Publish snapshot build to github
          command: ./.circleci/publish_to_github.sh

workflows:
  version: 2
  oss_abuse_monitoring:
    triggers:
      - schedule:
          cron: '* * * * *'
          filters:
            branches:
              only:
                - main
    jobs:
      - buildalert/monitor-builds:
          alert-threshold-max-builds: 5
          alert-threshold-max-builds-per-user: 5
          alert-threshold-seconds: 60
          circle-project-org: 'angular'
          circle-project-reponame: 'angular'
          circle-token-envvar: 'OSS_ABUSE_CIRCLECI_TOKEN'
          slack-app-url-envvar: 'OSS_ABUSE_SLACK_URL'
  default_workflow:
    jobs:
      - test
      - lint
      - publish_snapshot_build:
          filters:
            branches:
              only:
                - main
                # Additional branch that can be used to test the snapshot build output.
                # Developers can just push to that branch to test the built artifact.
                - snapshot-test
