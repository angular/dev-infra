// source: https://github.com/bazelbuild/bazel/blob/7f1cfd4314e3fcef50a109e6749945d93f264812/src/main/protobuf/test_status.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.blaze.BlazeTestStatus', null, global);
goog.exportSymbol('proto.blaze.FailedTestCasesStatus', null, global);
goog.exportSymbol('proto.blaze.TestCase', null, global);
goog.exportSymbol('proto.blaze.TestCase.Status', null, global);
goog.exportSymbol('proto.blaze.TestCase.Type', null, global);
goog.exportSymbol('proto.blaze.TestResultData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blaze.TestCase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blaze.TestCase.repeatedFields_, null);
};
goog.inherits(proto.blaze.TestCase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blaze.TestCase.displayName = 'proto.blaze.TestCase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blaze.TestResultData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blaze.TestResultData.repeatedFields_, null);
};
goog.inherits(proto.blaze.TestResultData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blaze.TestResultData.displayName = 'proto.blaze.TestResultData';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blaze.TestCase.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blaze.TestCase.prototype.toObject = function(opt_includeInstance) {
  return proto.blaze.TestCase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blaze.TestCase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blaze.TestCase.toObject = function(includeInstance, msg) {
  var f, obj = {
    childList: jspb.Message.toObjectList(msg.getChildList(),
    proto.blaze.TestCase.toObject, includeInstance),
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    className: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    runDurationMillis: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    result: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    run: jspb.Message.getBooleanFieldWithDefault(msg, 8, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blaze.TestCase}
 */
proto.blaze.TestCase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blaze.TestCase;
  return proto.blaze.TestCase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blaze.TestCase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blaze.TestCase}
 */
proto.blaze.TestCase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blaze.TestCase;
      reader.readMessage(value,proto.blaze.TestCase.deserializeBinaryFromReader);
      msg.addChild(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRunDurationMillis(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 6:
      var value = /** @type {!proto.blaze.TestCase.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {!proto.blaze.TestCase.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRun(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blaze.TestCase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blaze.TestCase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blaze.TestCase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blaze.TestCase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChildList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.blaze.TestCase.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {!proto.blaze.TestCase.Type} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {!proto.blaze.TestCase.Status} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.blaze.TestCase.Type = {
  TEST_CASE: 0,
  TEST_SUITE: 1,
  TEST_DECORATOR: 2,
  UNKNOWN: 3
};

/**
 * @enum {number}
 */
proto.blaze.TestCase.Status = {
  PASSED: 0,
  FAILED: 1,
  ERROR: 2
};

/**
 * repeated TestCase child = 1;
 * @return {!Array<!proto.blaze.TestCase>}
 */
proto.blaze.TestCase.prototype.getChildList = function() {
  return /** @type{!Array<!proto.blaze.TestCase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blaze.TestCase, 1));
};


/**
 * @param {!Array<!proto.blaze.TestCase>} value
 * @return {!proto.blaze.TestCase} returns this
*/
proto.blaze.TestCase.prototype.setChildList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.blaze.TestCase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blaze.TestCase}
 */
proto.blaze.TestCase.prototype.addChild = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.blaze.TestCase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.clearChildList = function() {
  return this.setChildList([]);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.blaze.TestCase.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestCase.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string class_name = 3;
 * @return {string}
 */
proto.blaze.TestCase.prototype.getClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.setClassName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.clearClassName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestCase.prototype.hasClassName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 run_duration_millis = 4;
 * @return {number}
 */
proto.blaze.TestCase.prototype.getRunDurationMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.setRunDurationMillis = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.clearRunDurationMillis = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestCase.prototype.hasRunDurationMillis = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string result = 5;
 * @return {string}
 */
proto.blaze.TestCase.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.setResult = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.clearResult = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestCase.prototype.hasResult = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Type type = 6;
 * @return {!proto.blaze.TestCase.Type}
 */
proto.blaze.TestCase.prototype.getType = function() {
  return /** @type {!proto.blaze.TestCase.Type} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.blaze.TestCase.Type} value
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.setType = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.clearType = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestCase.prototype.hasType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Status status = 7;
 * @return {!proto.blaze.TestCase.Status}
 */
proto.blaze.TestCase.prototype.getStatus = function() {
  return /** @type {!proto.blaze.TestCase.Status} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.blaze.TestCase.Status} value
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestCase.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool run = 8;
 * @return {boolean}
 */
proto.blaze.TestCase.prototype.getRun = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, true));
};


/**
 * @param {boolean} value
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.setRun = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestCase} returns this
 */
proto.blaze.TestCase.prototype.clearRun = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestCase.prototype.hasRun = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blaze.TestResultData.repeatedFields_ = [4,5,9,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blaze.TestResultData.prototype.toObject = function(opt_includeInstance) {
  return proto.blaze.TestResultData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blaze.TestResultData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blaze.TestResultData.toObject = function(includeInstance, msg) {
  var f, obj = {
    cachable: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    testPassed: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    statusDetails: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
    failedLogsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    warningList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    hasCoverage: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    remotelyCached: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    isRemoteStrategy: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    testTimesList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    passedLog: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    testProcessTimesList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    runDurationMillis: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    startTimeMillisEpoch: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    testCase: (f = msg.getTestCase()) && proto.blaze.TestCase.toObject(includeInstance, f),
    failedStatus: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blaze.TestResultData}
 */
proto.blaze.TestResultData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blaze.TestResultData;
  return proto.blaze.TestResultData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blaze.TestResultData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blaze.TestResultData}
 */
proto.blaze.TestResultData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCachable(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestPassed(value);
      break;
    case 3:
      var value = /** @type {!proto.blaze.BlazeTestStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusDetails(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addFailedLogs(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addWarning(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasCoverage(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemotelyCached(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRemoteStrategy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addTestTimes(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassedLog(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addTestProcessTimes(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRunDurationMillis(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTimeMillisEpoch(value);
      break;
    case 13:
      var value = new proto.blaze.TestCase;
      reader.readMessage(value,proto.blaze.TestCase.deserializeBinaryFromReader);
      msg.setTestCase(value);
      break;
    case 14:
      var value = /** @type {!proto.blaze.FailedTestCasesStatus} */ (reader.readEnum());
      msg.setFailedStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blaze.TestResultData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blaze.TestResultData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blaze.TestResultData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blaze.TestResultData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {!proto.blaze.BlazeTestStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getFailedLogsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getWarningList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getTestTimesList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTestProcessTimesList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getTestCase();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.blaze.TestCase.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.blaze.FailedTestCasesStatus} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeEnum(
      14,
      f
    );
  }
};


/**
 * optional bool cachable = 1;
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.getCachable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setCachable = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearCachable = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasCachable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool test_passed = 2;
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.getTestPassed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setTestPassed = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearTestPassed = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasTestPassed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BlazeTestStatus status = 3;
 * @return {!proto.blaze.BlazeTestStatus}
 */
proto.blaze.TestResultData.prototype.getStatus = function() {
  return /** @type {!proto.blaze.BlazeTestStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.blaze.BlazeTestStatus} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string status_details = 16;
 * @return {string}
 */
proto.blaze.TestResultData.prototype.getStatusDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setStatusDetails = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearStatusDetails = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasStatusDetails = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated string failed_logs = 4;
 * @return {!Array<string>}
 */
proto.blaze.TestResultData.prototype.getFailedLogsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setFailedLogsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.addFailedLogs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearFailedLogsList = function() {
  return this.setFailedLogsList([]);
};


/**
 * repeated string warning = 5;
 * @return {!Array<string>}
 */
proto.blaze.TestResultData.prototype.getWarningList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setWarningList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.addWarning = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearWarningList = function() {
  return this.setWarningList([]);
};


/**
 * optional bool has_coverage = 6;
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.getHasCoverage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setHasCoverage = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearHasCoverage = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasHasCoverage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool remotely_cached = 7;
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.getRemotelyCached = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setRemotelyCached = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearRemotelyCached = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasRemotelyCached = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool is_remote_strategy = 8;
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.getIsRemoteStrategy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setIsRemoteStrategy = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearIsRemoteStrategy = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasIsRemoteStrategy = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated int64 test_times = 9;
 * @return {!Array<number>}
 */
proto.blaze.TestResultData.prototype.getTestTimesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setTestTimesList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.addTestTimes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearTestTimesList = function() {
  return this.setTestTimesList([]);
};


/**
 * optional string passed_log = 10;
 * @return {string}
 */
proto.blaze.TestResultData.prototype.getPassedLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setPassedLog = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearPassedLog = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasPassedLog = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated int64 test_process_times = 11;
 * @return {!Array<number>}
 */
proto.blaze.TestResultData.prototype.getTestProcessTimesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setTestProcessTimesList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.addTestProcessTimes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearTestProcessTimesList = function() {
  return this.setTestProcessTimesList([]);
};


/**
 * optional int64 run_duration_millis = 12;
 * @return {number}
 */
proto.blaze.TestResultData.prototype.getRunDurationMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setRunDurationMillis = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearRunDurationMillis = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasRunDurationMillis = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int64 start_time_millis_epoch = 15;
 * @return {number}
 */
proto.blaze.TestResultData.prototype.getStartTimeMillisEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setStartTimeMillisEpoch = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearStartTimeMillisEpoch = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasStartTimeMillisEpoch = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional TestCase test_case = 13;
 * @return {?proto.blaze.TestCase}
 */
proto.blaze.TestResultData.prototype.getTestCase = function() {
  return /** @type{?proto.blaze.TestCase} */ (
    jspb.Message.getWrapperField(this, proto.blaze.TestCase, 13));
};


/**
 * @param {?proto.blaze.TestCase|undefined} value
 * @return {!proto.blaze.TestResultData} returns this
*/
proto.blaze.TestResultData.prototype.setTestCase = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearTestCase = function() {
  return this.setTestCase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasTestCase = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional FailedTestCasesStatus failed_status = 14;
 * @return {!proto.blaze.FailedTestCasesStatus}
 */
proto.blaze.TestResultData.prototype.getFailedStatus = function() {
  return /** @type {!proto.blaze.FailedTestCasesStatus} */ (jspb.Message.getFieldWithDefault(this, 14, 1));
};


/**
 * @param {!proto.blaze.FailedTestCasesStatus} value
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.setFailedStatus = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blaze.TestResultData} returns this
 */
proto.blaze.TestResultData.prototype.clearFailedStatus = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blaze.TestResultData.prototype.hasFailedStatus = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * @enum {number}
 */
proto.blaze.FailedTestCasesStatus = {
  FULL: 1,
  PARTIAL: 2,
  NOT_AVAILABLE: 3,
  EMPTY: 4
};

/**
 * @enum {number}
 */
proto.blaze.BlazeTestStatus = {
  NO_STATUS: 0,
  PASSED: 1,
  FLAKY: 2,
  TIMEOUT: 3,
  FAILED: 4,
  INCOMPLETE: 5,
  REMOTE_FAILURE: 6,
  FAILED_TO_BUILD: 7,
  BLAZE_HALTED_BEFORE_TESTING: 8
};

goog.object.extend(exports, proto.blaze);
