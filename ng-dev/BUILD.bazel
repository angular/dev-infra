load("@devinfra_npm//:defs.bzl", "npm_link_all_packages")
load("//:package.bzl", "NPM_PACKAGE_SUBSTITUTIONS")
load("//tools:defaults2.bzl", "esbuild", "extract_types", "npm_package", "ts_config", "ts_project")

npm_link_all_packages()

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = [
        "//ng-dev:__subpackages__",
    ],
    deps = [
        "//ng-dev:node_modules/@types/node",
    ],
)

ts_config(
    name = "tsconfig_test",
    src = "tsconfig-test.json",
    visibility = [
        "//ng-dev:__subpackages__",
    ],
    deps = [
        ":tsconfig",
    ],
)

NG_DEV_EXTERNALS = [
    # `typescript` is external because we want the project to provide a TypeScript version.
    # TODO: Figure out how we want to manage dependencies for the dev-infra tool.
    "typescript",
    # Packages using `__filename` and `__dirname` and cannot be bundled in ESM. We do not
    # intend to provide interop globals for this as it could hide other significant issues.
    "@yarnpkg/lockfile",
    "@google-cloud/spanner",
]

ts_project(
    name = "ng-dev",
    srcs = [
        "cli.ts",
        "index.ts",
    ],
    visibility = [
        "//ng-dev:__subpackages__",
    ],
    deps = [
        "//ng-dev:node_modules/@types/yargs",
        "//ng-dev:node_modules/yaml",
        "//ng-dev:node_modules/yargs",
        "//ng-dev/ai:ai_rjs",
        "//ng-dev/auth:auth_rjs",
        "//ng-dev/caretaker:caretaker_rjs",
        "//ng-dev/commit-message:commit-message_rjs",
        "//ng-dev/format:format_rjs",
        "//ng-dev/misc:misc_rjs",
        "//ng-dev/ngbot:ngbot_rjs",
        "//ng-dev/perf:perf_rjs",
        "//ng-dev/pr:pr_rjs",
        "//ng-dev/pr/common/labels:labels_rjs",
        "//ng-dev/pr/config:config_rjs",
        "//ng-dev/pullapprove:pullapprove_rjs",
        "//ng-dev/release:release_rjs",
        "//ng-dev/release/config:config_rjs",
        "//ng-dev/release/precheck:precheck_rjs",
        "//ng-dev/release/publish:publish_rjs",
        "//ng-dev/release/stamping:stamping_rjs",
        "//ng-dev/release/versioning:versioning_rjs",
        "//ng-dev/ts-circular-dependencies:ts-circular-dependencies_rjs",
        "//ng-dev/utils:utils_rjs",
    ],
)

extract_types(
    name = "types",
    deps = [":ng-dev"],
)

esbuild(
    name = "bundles",
    config = {
        "resolveExtensions": [
            ".mjs",
            ".js",
            ".json",
        ],
        "outExtension": {".js": ".mjs"},
        "banner": {
            "js": """
import {createRequire as __cjsCompatRequire} from 'module';
const require = __cjsCompatRequire(import.meta.url);
""",
        },
        "mainFields": [
            "module",
            "main",
        ],
    },
    entry_points = [
        "cli.ts",
        "index.ts",
        # These additional entry-points need to be generated since the `ng-dev` tool tries
        # to launch these files/scripts dynamically (through e.g. `spawn` or `fork`).
        "//ng-dev/release/build:build-worker",
        "//ng-dev/pr/merge:commit-message-filter",
        "//ng-dev/pr/checkout:commit-message-filter",
    ],
    external = NG_DEV_EXTERNALS,
    format = "esm",
    platform = "node",
    sourcemap = "external",
    splitting = True,
    target = "node22",
    deps = [
        ":ng-dev_rjs",
    ],
)

filegroup(
    name = "static_files",
    srcs = ["package.json"],
)

npm_package(
    name = "npm_package",
    srcs = [
        "package.json",
        ":bundles",
        ":ng-dev_rjs",
        ":types",
    ],
    package = "@angular/ng-dev",
    substitutions = NPM_PACKAGE_SUBSTITUTIONS,
)
