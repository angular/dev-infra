load("//tools:defaults.bzl", "esbuild_esm_bundle", "ts_library")
load("//bazel:extract_types.bzl", "extract_types")

NG_DEV_EXTERNALS = [
    # `typescript` is external because we want the project to provide a TypeScript version.
    # TODO: Figure out how we want to manage dependencies for the dev-infra tool.
    "typescript",
]

ts_library(
    name = "ng-dev",
    srcs = [
        "cli.ts",
        "index.ts",
    ],
    visibility = [
        "//ng-dev:__subpackages__",
    ],
    deps = [
        "//ng-dev/caretaker",
        "//ng-dev/ci",
        "//ng-dev/commit-message",
        "//ng-dev/format",
        "//ng-dev/misc",
        "//ng-dev/ngbot",
        "//ng-dev/pr",
        "//ng-dev/pr/config",
        "//ng-dev/pullapprove",
        "//ng-dev/release",
        "//ng-dev/release/config",
        "//ng-dev/release/precheck",
        "//ng-dev/release/publish",
        "//ng-dev/release/versioning",
        "//ng-dev/ts-circular-dependencies",
        "//ng-dev/utils",
        "@npm//@types/yargs",
        "@npm//yargs",
    ],
)

extract_types(
    name = "types",
    visibility = ["//:npm"],
    deps = [":ng-dev"],
)

esbuild_esm_bundle(
    name = "bundles",
    entry_points = [
        "cli.ts",
        "index.ts",
        # These additional entry-points need to be generated since the `ng-dev` tool tries
        # to launch these files/scripts dynamically (through e.g. `spawn` or `fork`).
        "//ng-dev/release/build:build-worker.ts",
        "//ng-dev/pr/merge:strategies/commit-message-filter.ts",
    ],
    external = NG_DEV_EXTERNALS,
    splitting = True,
    visibility = ["//:npm"],
    deps = [
        ":ng-dev",
    ],
)

filegroup(
    name = "static_files",
    srcs = ["package.json"],
    visibility = ["//:npm"],
)
