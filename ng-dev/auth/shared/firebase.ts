import {
  GoogleAuthProvider,
  getAuth,
  signInWithCredential,
  linkWithCredential,
  GithubAuthProvider,
} from 'firebase/auth';
import {Log} from '../../utils/logging.js';
import {
  deviceCodeOAuthDance,
  authorizationCodeOAuthDance,
  GithubOAuthDanceConfig,
  GoogleOAuthDanceConfig,
} from './oauth.js';

export async function loginToFirebase() {
  /** The type of OAuth dance to do based on whether a session display is available. */
  const oAuthDance = process.env.DISPLAY ? authorizationCodeOAuthDance : deviceCodeOAuthDance;
  try {
    /** The id and access tokens for Google from the oauth login. */
    const {idToken, accessToken} = await oAuthDance(GoogleOAuthDanceConfig);
    /** The credential generated by the GoogleAuthProvider from the OAuth tokens. */
    const googleCredential = GoogleAuthProvider.credential(idToken, accessToken);
    /** The newly signed in user. */
    const {user} = await signInWithCredential(getAuth(), googleCredential);

    // If the user already has a github account linked to their account, the login is complete.
    if (user.providerData.find((provider) => provider.providerId === 'github.com')) {
      return true;
    }

    /** The access token for Github from the oauth login. */
    const {accessToken: githubAccessToken} = await oAuthDance(GithubOAuthDanceConfig);

    // Link the Github account to the account for the currently logged in user.
    await linkWithCredential(user, GithubAuthProvider.credential(githubAccessToken));
    return true;
  } catch (e) {
    if (e instanceof Error) {
      Log.error(`${e.name}: ${e.message}`);
    } else {
      Log.error(e);
    }
    return false;
  }
}
