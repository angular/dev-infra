name: 'Setup WSL'
description: 'Sets up WSL for the current Windows VM'
author: 'Angular'

inputs:
  wsl_firewall_interface:
    description: Interface alias for the WSL firewall.
    default: 'vEthernet (WSL)'
    required: false
  wsl_networking_mode:
    description: Networking mode for the WSL config
    default: NAT
    required: false
  cache_version:
    description: Version that can be used to invalidate the cache
    default: 1
    required: false

outputs:
  cmd_path:
    description: WSL unix path pointing to `cmd.exe` of the host system.
    value: ${{steps.wsl_paths.outputs.cmd_path}}
  npm_path:
    description: WSL unix path pointing to `npm` of the host system.
    value: ${{steps.wsl_paths.outputs.npm_path}}
  git_path:
    description: WSL unix path pointing to `git` of the host system.
    value: ${{steps.wsl_paths.outputs.git_path}}
  tmp_path:
    description: WSL unix path pointing to the temporary directory in the host system.
    value: ${{steps.wsl_paths.outputs.tmp_path}}
  wsl_root_path:
    description: Windows path pointing to the WSL file system root (using a symlink).
    value: C:\wsl_root
  wsl_root_unc_path:
    description: UNC Windows path pointing to the WSL file system root.
    value: \\\\wsl.localhost\Debian
  repo_path:
    description: Path to the copied repository directory
    value: ${{steps.disk_path.outputs.repo}}

runs:
  using: composite
  steps:
    # Configure the WSL VM.
    # Note: `memory` by default is 50% of the Windows host machine. We want to try
    # a higher percentage to leverage more of the GitHub Windows machines.
    # They have 16GB by default. See: https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners.
    - uses: Vampire/setup-wsl@v4
      with:
        wsl-conf: |
          [interop]
            appendWindowsPath=false
          [wsl2]
            firewall=false
            localhostForwarding=false
            memory=14GB
            networkingMode=${{inputs.wsl_networking_mode}}
        wsl-shell-command: bash --login -euo pipefail
        additional-packages: |
          curl
          ca-certificates
          g++
          unzip
          zip
          git
          python3
          tar

    - name: Determining paths for common WSL usage (e.g. path to cmd, npm, git)
      id: wsl_paths
      # Note: This executes outside of WSL.
      shell: bash
      run: |
        cmd_path=$(which cmd.exe)
        cmd_wsl_path=$(wsl exec wslpath -u $cmd_path)
        npm_path=$(which npm)
        npm_wls_path=$(wsl exec wslpath -u "$npm_path")
        tmp_dir_wsl_path=$(wsl exec wslpath -u "/tmp")

        git_bin=$(which git)
        git_bin_wsl_path=$(wsl exec wslpath -u "$git_bin")

        echo "cmd_path=$cmd_wsl_path" >> $GITHUB_OUTPUT
        echo "npm_path=$npm_wls_path" >> $GITHUB_OUTPUT
        echo "tmp_path=$tmp_dir_wsl_path" >> $GITHUB_OUTPUT
        echo "git_path=$git_bin_wsl_path" >> $GITHUB_OUTPUT

    - name: Disable WSL <> Host virtual network firewall (to allow for testing)
      shell: powershell
      run: Set-NetFirewallProfile -Profile Public -DisabledInterfaceAliases "${{inputs.wsl_firewall_interface}}"

    - name: Create link to WSL drive
      shell: powershell
      run: New-Item -ItemType SymbolicLink -Path "C:\wsl_root" -Target "\\wsl.localhost\Debian"

    - name: Linking workspace into WSL for fast disk access
      shell: wsl-bash {0}
      id: disk_path
      env:
        WSLENV: 'GITHUB_OUTPUT/p'
      run: |
        mkdir $HOME/repo
        cp -R ./* $HOME/repo/
        echo "repo=$(wslpath -w $HOME/repo)" >> $GITHUB_OUTPUT

    - name: Cache for nvm, yarn profile caches.
      uses: actions/cache@v4
      with:
        path: |
          C:\\wsl_root\\Debian\\root\\.nvm\\versions
          C:\\wsl_root\\Debian\\root\\.yarn\\berry\cache
        key: "${{ runner.os }}-wsl-cache-v${{inputs.cache_version}}-${{hashFiles('**/.nvmrc')}}-${{hashFiles('**/yarn.lock')}}"
        restore-keys: |
          ${{ runner.os }}-wsl-cache-v${{inputs.cache_version}}-

    - name: Setup nvm
      working-directory: ${{steps.paths.outputs.repo}}
      shell: wsl-bash {0}
      run: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        # Note: Specify `--install` due to https://github.com/nvm-sh/nvm/issues/1985.
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --install

    - run: nvm install
      working-directory: ${{steps.paths.outputs.repo}}
      shell: wsl-bash {0}
    - run: npm install -g yarn@1
      working-directory: ${{steps.paths.outputs.repo}}
      shell: wsl-bash {0}
